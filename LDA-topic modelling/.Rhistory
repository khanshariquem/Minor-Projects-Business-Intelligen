}
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
NPMI = function(DT, m,l){
number_of_documents = dim(DT)[1]
p_ml = length(which(DT[,l] >0 & DT[,m] >0))  / (number_of_documents * number_of_documents)
p_l = length(which(DT[,l] >0))/number_of_documents
p_m = length(which(DT[,m] >0))/number_of_documents
# p_ml: probability of word m and word l both appears in a document
# p_l: probability of word l appears in a document
# p_m: probability of word m appears in a document
if (p_ml==0)
return(0)
else
return( log( p_ml  / (p_l * p_m)) / -log(p_ml) )
}
compute_c <- function(LDA_model, dataset,  top_N, method=c("LCP", "NPMI"), top_K= 0){
c = list()
if(method == "LCP")
method = LCP
else
method = NPMI
top_words <- apply(t(LDA_model), 2, FUN = function(x) sort(x, decreasing = T,index.return = T)$ix[1:top_N]) #find top N words
#the following nested for-loop computes NPMI or LCP for all word pairs in top N for all topics
for( i in 1:dim(top_words)[2]){
temp_c = 0
for( m in 2:top_N){
for(l in 1: (m-1)){
temp_c = temp_c + method(dataset,top_words[m,i],top_words[l,i])
}
}
c[[i]] = temp_c
}
c = as.numeric(c)
if(top_K == 0)
return( sum(c)/dim(LDA_model)[1])
else
return( sum(sort(c, decreasing = T,index.return = T)$x[1:top_K]) / top_K  )
}
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
for(i in seq(10,100,10)){
LDA_model <- LDA(train_data, control=list(iter=100, seed=SEED), k=i, method="Gibbs")
models <- c(models,LDA_model)
}
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
models[1]@beta
models[1]
models[[1]
]
models[[1]]@beta
NPMI = function(DT, m,l){
number_of_documents = dim(DT)[1]
p_ml = length(which(DT[,l] >0) && which(DT[,m] >0))  / (number_of_documents * number_of_documents)
p_l = length(which(DT[,l] >0))/number_of_documents
p_m = length(which(DT[,m] >0))/number_of_documents
# p_ml: probability of word m and word l both appears in a document
# p_l: probability of word l appears in a document
# p_m: probability of word m appears in a document
if (p_ml==0)
return(0)
else
return( log( p_ml  / (p_l * p_m)) / -log(p_ml) )
}
compute_c <- function(LDA_model, dataset,  top_N, method=c("LCP", "NPMI"), top_K= 0){
c = list()
if(method == "LCP")
method = LCP
else
method = NPMI
top_words <- apply(t(LDA_model), 2, FUN = function(x) sort(x, decreasing = T,index.return = T)$ix[1:top_N]) #find top N words
#the following nested for-loop computes NPMI or LCP for all word pairs in top N for all topics
for( i in 1:dim(top_words)[2]){
temp_c = 0
for( m in 2:top_N){
for(l in 1: (m-1)){
temp_c = temp_c + method(dataset,top_words[m,i],top_words[l,i])
}
}
c[[i]] = temp_c
}
c = as.numeric(c)
if(top_K == 0)
return( sum(c)/dim(LDA_model)[1])
else
return( sum(sort(c, decreasing = T,index.return = T)$x[1:top_K]) / top_K  )
}
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
NPMI = function(DT, m,l){
number_of_documents = dim(DT)[1]
p_ml = length(which(DT[,l] >0 & DT[,m] >0))  / (number_of_documents * number_of_documents)
p_l = length(which(DT[,l] >0))/number_of_documents
p_m = length(which(DT[,m] >0))/number_of_documents
# p_ml: probability of word m and word l both appears in a document
# p_l: probability of word l appears in a document
# p_m: probability of word m appears in a document
if (p_ml==0)
return(0)
else
return( log( p_ml  / (p_l * p_m)) / -log(p_ml) )
}
compute_c <- function(LDA_model, dataset,  top_N, method=c("LCP", "NPMI"), top_K= 0){
c = list()
if(method == "LCP")
method = LCP
else
method = NPMI
top_words <- apply(t(LDA_model), 2, FUN = function(x) sort(x, decreasing = T,index.return = T)$ix[1:top_N]) #find top N words
#the following nested for-loop computes NPMI or LCP for all word pairs in top N for all topics
for( i in 1:dim(top_words)[2]){
temp_c = 0
for( m in 2:top_N){
for(l in 1: (m-1)){
temp_c = temp_c + method(dataset,top_words[m,i],top_words[l,i])
}
}
c[[i]] = temp_c
}
c = as.numeric(c)
if(top_K == 0)
return( sum(c)/dim(LDA_model)[1])
else
return( sum(sort(c, decreasing = T,index.return = T)$x[1:top_K]) / top_K  )
}
for(i in seq(10,100,10)){
LDA_model <- LDA(train_data, control=list(iter=100, seed=SEED), k=i, method="Gibbs")
models <- c(models,LDA_model)
}
for(i in seq(10,100,10)){
LDA_model <- LDA(train_data, control=list(iter=100, seed=SEED), k=i, method="Gibbs")
models <- c(models,LDA_model)
}
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
train_data<-yelp_matrix[1:1000,]
test_data<-AssociatedPress[-(1:1000),]
models<-c()
for(i in seq(10,100,10)){
LDA_model <- LDA(train_data, control=list(iter=100, seed=SEED), k=i, method="Gibbs")
models <- c(models,LDA_model)
}
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
test_data<-yelp_matrix[-(1:1000),]
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
NPMI_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"NPMI"))
plot(NPMI_coh,type = "o" ,axes = FALSE, ann = FALSE)
plot(NPMI_coh,type = "o" , xlab = "num of topics" , ylab = "NPMI")
axis(side = 1, at=1:10,lab=seq(10,100,10))
LCP = function(DT, m,l ){
D_ml = length(which(DT[,m] >0 & DT[,l] >0))
D_l = length(which(DT[,l] >0))
D_m = length(which(DT[,m] >0))
# D_ml: Number of documents that contain both of word m and word l
# D_l: Number of documents that contain word l
# D_m: Number of documents that contain word m
return(log( (D_ml + 1) / D_l))
}
# YOUR CODE HERE
LCP_coh<-sapply(models, function(x) compute_c(x@beta,test_data,15,"LCP"))
plot(LCP_coh,type = "o" , xlab = "num of topics" , ylab = "LCP")
axis(side = 1, at=1:10,lab=seq(10,100,10))
# YOUR CODE HERE
train_data<-yelp_matrix[1:10000,]
test_data<-yelp_matrix[-(1:10000),]
models<-c()
for(i in seq(10,100,10)){
LDA_model <- LDA(train_data, control=list(iter=10, seed=SEED), k=i, method="Gibbs")
models <- c(models,LDA_model)
}
models[[1]]
models[[1]]@gamma
x<-models[[1]]@gamma
for(i in 1:10){}
for(i in 1:10){ }
for(i in 1:10000){
top_prob<-sort(x[[1]],decreasing = TRUE,index.return = TRUE)
}
x[[1]]
x[[10]]
x[1,]
top_prob<-sort(x[1,],decreasing = TRUE,index.return = TRUE)
top_prob
clusters<-matrix(nrow = 10, ncol = 10000)
clusters
clusters[[2][1]]
clusters[[2]][1]
top_prob
top_prob$ix[1]
# YOUR CODE HERE
clusters<-matrix(nrow = 10, ncol = 10000)
j=0
assign_clus<-function(lda_mod){
j = j + 1
for(i in 1:10000){
top_prob<-sort(x[1,],decreasing = TRUE,index.return = TRUE)
clusters[[j]][i]<-top_prob$ix[1]
}
}
sapply(models, function(x) assign_clus(x@gamma))
top_prob$ix[1]
top_prob$ix[[1]]
top_prob$ix[[1]][1]
top_prob$ix[[1]][0]
top_prob$ix[[1]]
top_prob$ix
y<-unlist(top_prob$ix)
y
y[1]
y[[1]]
typeof(top_prob$ix[[1]])
typeof(clusters[[1]][1])
clusters[[1]][1]
assign_clus<-function(lda_mod){
j = j + 1
for(i in 1:10000){
top_prob<-sort(lda_mod[1,],decreasing = TRUE,index.return = TRUE)
clusters[[j]][i]<-top_prob$ix[1]
}
}
sapply(models, function(x) assign_clus(x@gamma))
assign_clus<-function(lda_mod){
j = j + 1
for(i in 1:10000){
top_prob<-sort(lda_mod[1,],decreasing = TRUE,index.return = TRUE)
print(top_prob$ix[1])
clusters[[j]][i]<-top_prob$ix[1]
}
}
sapply(models, function(x) assign_clus(x@gamma))
# YOUR CODE HERE
clusters<-matrix(nrow = 10, ncol = 10000)
j=0
assign_clus<-function(lda_mod){
j = j + 1
for(i in 1:10000){
top_prob<-sort(lda_mod[i,],decreasing = TRUE,index.return = TRUE)
print(top_prob$ix[1])
clusters[[j]][i]<-top_prob$ix[1]
}
}
sapply(models, function(x) assign_clus(x@gamma))
print(clusters[[j]][i])
j=0
assign_clus<-function(lda_mod){
j = j + 1
for(i in 1:10000){
top_prob<-sort(lda_mod[i,],decreasing = TRUE,index.return = TRUE)
print(top_prob$ix[1])
print(clusters[[j]][i])
clusters[[j]][i]<-top_prob$ix[1]
}
}
sapply(models, function(x) assign_clus(x@gamma))
j=0
assign_clus<-function(lda_mod){
j = j + 1
for(i in 1:10000){
top_prob<-sort(lda_mod[i,],decreasing = TRUE,index.return = TRUE)
print(top_prob$ix[1])
print(j)
clusters[[j]][i]<-top_prob$ix[1]
}
}
sapply(models, function(x) assign_clus(x@gamma))
# YOUR CODE HERE
clusters<- list()
j=0
assign_clus<-function(lda_mod){
j = j + 1
vec <-c()
for(i in 1:10000){
top_prob<-sort(lda_mod[i,],decreasing = TRUE,index.return = TRUE)
vec<-c(vec,top_prob$ix[1])
}
clusters[[j]]<-vec
}
sapply(models, function(x) assign_clus(x@gamma))
clusters<-sapply(models, function(x) assign_clus(x@gamma))
clusters
clusters[[2]][3]
clusters[[2]]
clusters[[2]][2]
clusters[[2]][1]
clusters[[2]][[1]]
clusters[[2]][[2]]
clusters[[2]]
# YOUR CODE HERE
clusters<- list()
j=0
assign_clus<-function(lda_mod){
j = j + 1
vec <-c()
for(i in 1:10000){
top_prob<-sort(lda_mod[i,],decreasing = TRUE,index.return = TRUE)
print(top_prob$ix)
vec<-c(vec,top_prob$ix[1])
}
clusters[[j]]<-vec
}
clusters<-sapply(models, function(x) assign_clus(x@gamma))
# YOUR CODE HERE
clusters<- list()
j=0
assign_clus<-function(lda_mod){
j = j + 1
vec <-c()
for(i in 1:10000){
top_prob<-sort(lda_mod[i,],decreasing = TRUE,index.return = TRUE)
#print(top_prob$ix)
vec<-c(vec,top_prob$ix[1])
}
clusters[[j]]<-vec
}
clusters<-sapply(models, function(x) assign_clus(x@gamma))
clusters
models[[10]]@gamma
# YOUR CODE HERE
clusters<- list()
j=0
assign_clus<-function(lda_mod){
j = j + 1
vec <-c()
for(i in 1:10000){
top_prob<-sort(lda_mod[i,],decreasing = TRUE,index.return = TRUE)
#print(top_prob$ix)
vec<-c(vec,top_prob$ix[1])
}
print(vec)
}
clusters<-sapply(models, function(x) assign_clus(x@gamma))
models[[1]]@gamma
models[[2]]@gamma
# YOUR CODE HERE
clusters<- list()
j=0
assign_clus<-function(lda_mod){
j = j + 1
vec <-c()
for(i in 1:10000){
top_prob<-sort(lda_mod[i,],decreasing = TRUE,index.return = TRUE)
#print(top_prob$ix)
vec<-c(vec,top_prob$ix[1])
}
clusters<-vec
}
clusters<-sapply(models, function(x) assign_clus(x@gamma))
labels <- rep(1:10, each=1000)
labels
clusters[1]
clusters[1,]
clusters
clusters[,1]
y<-clusters[,1]
y[1]
pure <-list()
j=0
purity <- function(clust,lab) {
j = j + 1
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
pure[j]<-count/10000
}
for(i in 1:10){
purity(clusters[,i],labels)
}
pure
pure[1]
pure <-list()
j=0
purity <- function(clust,lab) {
j = j + 1
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
print(count)
pure[j]<-count/10000
}
for(i in 1:2){
purity(clusters[,i],labels)
}
pure <-list()
j=0
for(i in 1:2){
purity(clusters[,i],labels)
}
pure
pure <-list()
j=0
purity <- function(clust,lab) {
j = j + 1
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
#print(count)
pure <- (count/10000)
}
for(i in 1:2){
purity(clusters[,i],labels)
}
pure
pure <-list()
j=0
purity <- function(clust,lab) {
j = j + 1
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
#print(count)
vec <-c()
vec <-c(vec,(count/10000))
pure <- vec
}
for(i in 1:2){
purity(clusters[,i],labels)
}
pure
pure[1]
pure <-list()
j=0
purity <- function(clust,lab) {
j = j + 1
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
count = (count/10000)
print(count)
vec <-c()
vec <-c(vec,count)
pure <- vec
}
for(i in 1:2){
purity(clusters[,i],labels)
}
pure
p <-list()
j=0
purity <- function(clust,lab) {
j = j + 1
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
count = (count/10000)
p <- count
}
for(i in 1:2){
purity(clusters[,i],labels)
}
p
p <-list()
j=0
purity <- function(clust,lab) {
j = j + 1
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
count = (count/10000)
p <- c(p,count)
}
for(i in 1:2){
purity(clusters[,i],labels)
}
p
p <-c()
purity <- function(clust,lab) {
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
count = (count/10000)
p <- c(p,count)
}
for(i in 1:2){
purity(clusters[,i],labels)
}
p
purity <- function(clust,lab,p) {
count = 0
for(i in 1:10000){
if(clust[i]==lab[i])
count = count + 1
}
count = (count/10000)
p <- c(p,count)
}
p <- c()
for(i in 1:2){
p = purity(clusters[,i],labels,p)
}
p
p <- c()
for(i in 1:10){
p = purity(clusters[,i],labels,p)
}
p
plot(p,type = "o" , xlab = "num of topics" , ylab = "Purity")
axis(side = 1, at=1:10,lab=seq(10,100,10))
clusters
intersect(clusters[,1], labels)
